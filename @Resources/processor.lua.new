function Initialize()
	local version = '1.1.5'
	local parent = [=[
[P]
Measure=Plugin
Plugin=AudioAnalyzer
Type=Parent
MagicNumber=104
Processing=]=]
	local group = [=[
Processing_NUM=Channels #Channel# | Handlers PNUMH1,PNUMH2,PNUMH3,PNUMH4,NUM
Handler_PNUMH1=Type FFT | BinWidth #AccuracyNUM# | OverlapBoost #OverlapNUM# | CascadesCount #CascadesNUM# | WindowFunction #WindowFunction#
Handler_PNUMH2=Type BandResampler | Source PNUMH1 | Bands Log (#Bands#+1) #FreqMin# #FreqMax#
Handler_PNUMH3=Type BandCascadeTransformer | Source PNUMH2 | MixFunction #MixFunction# | TargetWeight 100 | MinWeight 0
Handler_PNUMH4=Type TimeResampler | Source PNUMH3 | Granularity 1 | Attack #Attack# | Decay #Decay#
Handler_NUM=Type ValueTransformer | Source PNUMH4 | Transform dB Map[From #MinSensitivity# : #MaxSensitivity#]
]=]
	local band = [=[
[NUM]
Measure=Plugin
Plugin=AudioAnalyzer
Type=Child
Parent=P
ValueId=NUM
Array=1
Channel=#Channel#
]=]
	groups = SKIN:GetVariable('Groups', 0)
	local file = io.open(SKIN:GetVariable('CURRENTPATH') .. 'parent.inc')
	if file then
		fileversion = file:read()
		groupCount = file:read()
		file:close()
	end
	if (groups ~= (groupCount or nil)) or (fileversion ~= version) then
		local section = {version..string.char(10)..groups..string.char(10)..parent..'0'}
		for i=1,groups-1 do
			section[i+1] = '|' .. i
		end
		section = {table.concat(section)..string.char(10)}
		for i=1,groups do
			section[i+1] = string.gsub(group, 'NUM', i-1)
		end
		for i=1,groups do
			section[i+1+groups] = string.gsub(band, 'NUM', i-1)
		end
		local file = io.open(SKIN:GetVariable('CURRENTPATH') .. 'parent.inc', 'w')
		file:write(table.concat(section))
		file:close()
	end
	
	local file = io.open(SKIN:GetVariable('CURRENTPATH') .. 'variables.inc')
	if file then
		file:close()
	else
		os.execute('copy "' .. SKIN:GetVariable('@') .. 'defaultvariables.inc" "' .. SKIN:GetVariable('CURRENTPATH') .. 'variables.inc"')
	end
	
	if (groups ~= (groupCount or nil)) then
		SKIN:Bang('!Refresh')
		return
	end
	
	--timer
	st = 0
	el = 0
	st2 = os.clock()
	el2 = 0
	st3 = os.clock()
	el3 = 0
	st4 = os.clock()
	el4 = 0
	eli = 0
	--timer
	
	visType = string.upper(SKIN:GetVariable('Type', 'BAR'))
	visType = ((visType == "BAR" and 1) or (visType == "POLY" and 2)) or 1
	
	colorType = string.upper(SKIN:GetVariable('Color', 'CUSTOM'))
	colorType = ((colorType == "CUSTOM" and 1) or (colorType == "CHAMELEON" and 2)) or 1
	
	scale = SKIN:GetVariable('Scale', 1)
	
	bands = SKIN:GetVariable('Bands', 0)
	barSpacing = SKIN:GetVariable('BarSpacing', 0)
	width = SKIN:GetVariable('Width', 0)
	barWidth = SKIN:GetVariable('BarWidth', 0)
	height = SKIN:GetVariable('Height', 0)
	baseHeight = SKIN:GetVariable('BaseHeight', 0)
	trueHeight = height-baseHeight
	
	invert = string.upper(SKIN:GetVariable('Invert', 'NO'))
	invert = ((invert == "YES" and 1) or (colorType == "NO" and 2)) or 2
	
	avgType = string.upper(SKIN:GetVariable('AvgType', 'FLAT'))
	avgType = (((avgType == "FLAT" and 1) or (avgType == "LINEAR" and 2)) or (avgType == "EXPONENTIAL" and 3)) or 1
	avgConst = 0
	avgSize = SKIN:GetVariable('AvgSize', 1)
	avgBase = SKIN:GetVariable('AvgBase', 1)
	avgIndex = 0
	
	power = SKIN:GetVariable('Power', 1)
	
	bSrc = {SKIN:GetMeasure('0')}
	bAvg = {{}}
	cutoff = {1}
	cutoff[groups+1] = 0
	
	for i=2,groups do
		bSrc[i] = SKIN:GetMeasure(i-1)
		cutoff[i] = SKIN:GetVariable('Cutoff' .. i-2, 0)
	end

	if avgSize == 1 then
		avgConst = 1
	else
		if avgType == 1 then
			avgConst = 1/avgSize
		elseif avgType == 2 then
			avgConst = 1/(avgSize*(avgSize+1)/2)
		elseif avgType == 3 then
			weight = 1
			for i=1,avgSize do
				avgConst = avgConst + weight
				weight = weight * avgBase
			end
			avgConst = 1/avgConst
		end
	end
	
	for i=1,avgSize do
		bAvg[i] = {}
	end
	
	if colorType == 1 then
		SKIN:Bang('!SetOption', 'Shape', 'Color', 'FillColor#Custom#,#Alpha#|StrokeWidth0')
	elseif colorType == 2 then
		SKIN:Bang('!SetOption', 'Shape', 'Color', 'FillColor[RGB],#Alpha#|StrokeWidth0')
	end
	
	if visType == 1 then
		SKIN:Bang('!SetOption', 'Shape', 'TransformationMatrix', '(Cos(-#Angle#%360*Pi/180));(-Sin(-#Angle#%360*Pi/180));(Sin(-#Angle#%360*Pi/180));(Cos(-#Angle#%360*Pi/180));(((90<#Angle#%360)&(#Angle#%360<270)?Abs(Cos(#Angle#%360*Pi/180))*(#BarWidth#+#barSpacing#)*#Bands#*#Scale#:0)+((0<#Angle#%360)&(#Angle#%360<180)?Abs(Sin(#Angle#%360*Pi/180))*#Height#*#Scale#:0));(((180<#Angle#%360)&(#Angle#%360<360)?Abs(Sin(#Angle#%360*Pi/180))*(#BarWidth#+#barSpacing#)*#Bands#*#Scale#:0)+((90<#Angle#%360)&(#Angle#%360<270)?Abs(Cos(#Angle#%360*Pi/180))*#Height#*#Scale#:0))')
		SKIN:Bang('!SetOption', 'Shape', 'Shape', 'Rectangle0,0,0,0')
		bar = {'Rectangle', '', ',' .. height*scale .. ',' .. barWidth*scale .. ',', '', '|ExtendColor'}
	elseif visType == 2 then
		SKIN:Bang('!SetOption', 'Shape', 'TransformationMatrix', '(Cos(-#Angle#%360*Pi/180));(-Sin(-#Angle#%360*Pi/180));(Sin(-#Angle#%360*Pi/180));(Cos(-#Angle#%360*Pi/180));(((90<#Angle#%360)&(#Angle#%360<270)?Abs(Cos(#Angle#%360*Pi/180))*#Width#*#Scale#:0)+((0<#Angle#%360)&(#Angle#%360<180)?Abs(Sin(#Angle#%360*Pi/180))*#Height#*#Scale#:0));(((180<#Angle#%360)&(#Angle#%360<360)?Abs(Sin(#Angle#%360*Pi/180))*#Width#*#Scale#:0)+((90<#Angle#%360)&(#Angle#%360<270)?Abs(Cos(#Angle#%360*Pi/180))*#Height#*#Scale#:0))')
		SKIN:Bang('!SetOption', 'Shape', 'Path', '0,0|LineTo0,0')
		SKIN:Bang('!SetOption', 'Shape', 'Shape', 'PathPath|ExtendColor')
		--SKIN:Bang('!SetOption', 'Shape', 'Shape', 'PathPath|FillColor000000|StrokeWidth0')
		--SKIN:Bang('!SetOption', 'Shape', 'Shape2', 'Rectangle0,0,' .. width*scale .. ',' .. height*scale .. '|ExtendColor')
		--SKIN:Bang('!SetOption', 'Shape', 'Shape3', 'Combine Shape2|IntersectShape')
		path = {'0,' .. height*scale}
		for i=1,bands do
			path[i*2] = '|LineTo' .. (i-1)*width/(bands-1)*scale .. ','
		end
		path[2+bands*2] = '|LineTo' .. width*scale .. ',' .. height*scale .. '|Closepath1'
	end
	
	SELF:Enable()
end
function Update()

	--timer
	st=os.clock()
	--timer
	
	local c = {}
	local bCalc = {}
	avgIndex = (avgIndex + 1) % avgSize
	k = avgIndex + 1
	for j=groups,1,-1 do
		loadstring("b=" .. bSrc[j]:GetStringValue())()
		local bRaw = b
		for i=math.floor(bands*cutoff[j+1])+1,math.floor(bands*cutoff[j])+1 do
			local b = bRaw[i]
			if b < 0 then
				bCalc[i] = 0
			else
				bCalc[i] = b^power
			end
		end
	end
	bAvg[k] = bCalc
	
	--timer
	el=(el*eli+(os.clock()-st))/(eli+1);st4=os.clock()
	--timer
	
	local bMax = 1
	if tonumber(avgSize) > 1 then
		for i=1,bands do
			local out = 0
			if avgType == 1 then
				for j=1,avgSize do
					out = out + (bAvg[j][i] or 0)
				end
				out = out * avgConst
			elseif avgType == 2 then
				k = avgIndex + 1
				for j=1,avgSize do
					out = out + (bAvg[k][i] or 0) * j
					k = k % avgSize + 1
				end
				out = out * avgConst
			elseif avgType == 3 then
				k = avgIndex + 1
				avgWeight = 0
				weight = 1
				for j=1,avgSize do
					out = out + (bAvg[k][i] or 0) * weight
					weight = weight * avgBase
					k = k % avgSize + 1
				end
				out = out * avgConst
			else
				out = bAvg[k][i]
			end
			if out > bMax then bMax = out end
			c[i] = out
		end
	else
		for i=1,bands do
			local out = bAvg[k][i]
			if out > bMax then bMax = out end
		end
		c = bAvg[k]
	end
	
	--timer
	el4=(el4*eli+(os.clock()-st4))/(eli+1);st2=os.clock()
	--timer
	
	if invert == 1 then
		if visType == 1 then
			local p = bar
			local spacing = (barSpacing+barWidth)*scale
			for i=1,bands do
				p[2] = (i-1)*spacing
				p[4] = (-baseHeight-(trueHeight)*c[bands+1-i]/bMax)*scale
				SKIN:Bang('!SetOption', 'Shape', 'Shape' .. i+1, table.concat(p))
			end
		elseif visType == 2 then
			local p = path
			for i=1,bands do
				p[i*2+1] = (trueHeight-trueHeight*c[bands+1-i]/bMax)*scale
			end
			SKIN:Bang('!SetOption', 'Shape', 'Path', table.concat(p))
		end
	else
		if visType == 1 then
			local p = bar
			local spacing = (barSpacing+barWidth)*scale
			for i=1,bands do
				p[2] = (i-1)*spacing
				p[4] = (-baseHeight-(trueHeight)*c[i]/bMax)*scale
				SKIN:Bang('!SetOption', 'Shape', 'Shape' .. i+1, table.concat(p))
			end
		elseif visType == 2 then
			local p = path
			for i=1,bands do
				p[i*2+1] = (trueHeight-trueHeight*c[i]/bMax)*scale
			end
			SKIN:Bang('!SetOption', 'Shape', 'Path', table.concat(p))
		end
	end
	
	--timer
	el2=(el2*eli+(os.clock()-st2))/(eli+1);el3=(el3*eli+(os.clock()-st3))/(eli+1);SKIN:Bang('!SetOption','UpdateTime','Text',string.format("%.3f",el*1000)..' / '..string.format("%.3f",el4*1000)..' / '..string.format("%.3f",el2*1000)..' ('..string.format("%.3f",(el+el4+el2)*1000)..' -> '..string.format("%.2f",el3*1000)..')');st3=os.clock()
	if eli<999 then eli=eli+1 end
	--timer
	
end